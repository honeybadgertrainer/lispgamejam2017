;; dl-maps.ss
;; by tsip

(define dl-top-maps
	(list
		(list
			'(12 80 80 80 14 80 13 80 80 80 80 13 16)
			'(95 61 61 61 61 61 61 61 61 61 61 61 48)
			'(95 61 61 61 61 92 76 92 76 61 61 61 48)
			'(60 61 61 61 61 76 77 78 92 61 24 24 43)
			'(95 61 61 61 61 92 93 94 76 24 24 24 90)
			'(95 61 61 61 61 76 92 76 92 24 24 24 90)
			'(95 61 61 61 61 61 61 24 24 24 24 24 59)
			'(95 72 72 72 72 72 73 74 72 72 72 72 75))
		(list
			'(12 13 80 80 80 80 80 80 80 80 13 80 16)
			'(44 61 24 24 24 24 24 24 24 24 24 61 48)
			'(95 61 24 61 26 61 61 61 61 61 61 61 48)
			'(28 61 24 61 40 41 41 30 30 31 24 61 32)
			'(39 24 24 24 56 57 46 46 46 47 24 61 48)
			'(39 24 26 61 26 26 24 61 26 26 26 26 48)
			'(55 24 26 61 61 61 61 61 26 26 26 26 48)
			'(71 72 74 72 72 72 74 73 72 72 72 74 64))
		(list
			'(7 10 10 10 8 10 10 10 10 10 10 10 11)
			'(39 24 24 24 24 24 24 24 24 24 24 24 90)
			'(39 24 24 24 24 24 24 24 24 24 24 24 27)
			'(23 24 24 24 24 26 26 26 26 24 24 24 43)
			'(55 24 24 24 24 24 24 24 26 24 24 24 90)
			'(55 24 24 24 24 24 24 24 26 24 24 24 90)
			'(55 24 24 24 24 24 24 24 24 24 24 24 59)
			'(71 72 72 72 72 72 73 72 72 72 72 72 75))
		(list
			'(7 10 8 10 10 10 10 10 9 10 10 10 11)
			'(39 85 86 24 85 25 24 25 86 24 25 25 90)
			'(39 87 25 24 87 88 24 87 88 24 87 88 90)
			'(23 24 24 24 24 24 24 24 24 26 26 26 43)
			'(39 24 24 24 26 26 25 24 26 25 26 26 90)
			'(39 85 86 25 85 86 24 85 86 26 85 25 27)
			'(39 25 88 24 87 88 26 25 25 26 87 25 27)
			'(71 72 74 72 72 72 73 72 72 72 72 72 75))
		(list
			'(7 10 10 8 10 10 9 10 8 10 10 10 11)
			'(39 85 86 24 85 86 24 85 86 26 85 86 90)
			'(39 87 88 25 87 88 24 87 88 26 87 88 90)
			'(23 26 40 41 41 41 41 41 41 41 42 26 90)
			'(39 26 56 57 57 57 57 57 57 57 58 25 90)
			'(39 85 86 24 85 86 24 85 86 24 85 86 90)
			'(39 87 88 24 87 88 24 87 88 25 87 88 90)
			'(71 72 72 74 72 74 73 72 72 72 72 72 75))))
			
(define dl-left-walls
	(list
		(list
			'(0 1 2 62 62 62 5 62 62 4 62 62 6)
			'(0 33 51 51 51 51 51 51 51 51 51 51 91)
			'(0 49 51 50 50 50 50 50 50 50 50 51 91)
			'(0 89 51 50 50 50 50 50 50 51 50 51 38)
			'(0 89 51 51 51 51 51 51 51 51 50 51 22)
			'(0 89 50 50 50 50 50 50 50 50 50 51 22)
			'(0 89 51 51 51 51 51 51 51 51 51 51 54)
			'(0 65 66 66 66 66 68 67 67 69 69 69 70))
		(list
			'(1 80 80 80 80 14 15 80 13 80 80 80 16)
			'(89 50 51 61 61 61 61 61 61 61 61 61 48)
			'(89 53 52 52 52 61 61 61 61 61 61 61 48)
			'(17 53 52 51 50 53 51 61 61 61 61 61 32)
			'(89 53 53 53 53 51 52 51 52 61 61 61 48)
			'(49 51 51 53 53 51 51 52 50 53 51 61 48)
			'(89 51 51 52 52 50 52 53 52 52 51 50 48)
			'(65 69 69 69 69 69 68 69 67 67 67 67 70))))
			
(define dl-right-walls
	(list
		(list
			'(1 62 62 62 62 62 5 62 62 62 62 62 6)
			'(89 52 53 52 53 51 53 52 51 53 50 51 22)
			'(49 51 52 53 52 53 51 53 52 51 53 50 91)
			'(17 50 51 52 53 52 53 51 53 52 51 53 54)
			'(49 50 50 51 52 53 52 53 51 53 52 51 54)
			'(89 52 50 50 51 52 53 52 53 51 53 52 54)
			'(33 51 52 50 50 51 52 53 52 53 51 53 22)
			'(65 67 67 67 67 67 68 69 69 69 69 69 70))
		(list
			'(7 10 10 10 10 9 79 10 10 8 10 10 11)
			'(39 76 76 76 76 76 76 76 76 76 76 76 90)
			'(39 92 24 24 25 24 24 26 26 26 24 92 90)
			'(23 76 24 24 24 24 26 25 26 26 25 76 59)
			'(55 92 24 24 24 24 26 26 24 26 24 92 90)
			'(55 76 24 24 24 25 26 26 26 24 24 76 90)
			'(55 92 92 92 92 92 92 92 92 92 92 92 27)
			'(71 72 74 72 72 72 73 74 72 72 74 72 75))))
			
(define dl-bottom-maps
	(list
		(list
			'(7 9 10 10 10 10 79 10 2 3 8 10 11)
			'(39 24 24 24 26 26 26 26 26 50 51 52 90)
			'(39 50 51 52 26 26 25 26 52 53 24 24 90)
			'(49 50 51 50 51 52 81 26 52 53 25 26 43)
			'(89 24 24 24 25 26 26 82 26 52 53 24 59)
			'(89 24 26 26 50 51 52 25 24 24 24 24 22)
			'(33 25 26 50 51 52 50 51 52 24 24 24 54)
			'(71 72 72 72 72 72 69 69 72 72 72 69 70))
		(list
			'(12 13 80 14 80 80 15 80 80 80 13 14 16)
			'(95 61 92 92 92 76 61 61 61 29 30 31 63)
			'(95 61 92 76 76 76 92 92 92 45 46 47 63)
			'(28 50 76 76 29 30 31 92 92 61 61 61 32)
			'(49 50 50 61 45 46 47 61 61 61 61 61 48)
			'(33 50 50 50 61 61 61 61 61 50 51 52 48)
			'(33 50 50 50 50 61 61 61 61 51 52 53 48)
			'(65 66 66 67 67 67 67 66 66 66 69 69 64))
		(list
			'(1 13 96 80 2 4 5 80 80 10 10 10 11)
			'(89 53 52 53 53 51 51 51 61 61 61 61 48)
			'(95 50 51 53 51 51 51 51 51 61 61 61 48)
			'(17 53 51 53 53 51 51 51 51 24 24 61 32)
			'(44 53 51 51 53 53 26 26 24 25 24 61 27)
			'(95 52 52 50 50 53 25 24 24 26 26 26 90)
			'(55 51 51 50 52 24 24 24 24 26 26 26 63)
			'(71 72 72 72 72 69 69 66 66 67 69 74 64))
		(list
			'(1 62 62 62 62 62 5 62 62 62 62 62 6)
			'(49 85 86 81 83 85 86 81 83 85 86 81 91)
			'(49 87 88 84 82 87 88 84 82 87 88 84 91)
			'(17 81 83 85 86 81 83 85 86 81 83 85 38)
			'(89 84 82 87 88 84 82 87 88 84 82 87 91)
			'(89 85 86 81 83 85 86 81 83 85 86 81 54)
			'(89 87 88 84 82 87 88 84 82 87 88 84 54)
			'(65 66 66 67 69 67 66 69 67 69 66 67 70))
		(list
			'(1 62 62 3 62 62 5 62 3 62 4 2 6)
			'(89 92 92 92 76 76 76 76 76 92 76 92 54)
			'(89 92 85 86 76 76 76 76 76 85 86 76 54)
			'(17 92 87 88 92 81 76 83 92 87 88 92 22)
			'(33 76 85 86 92 84 76 82 92 85 86 76 91)
			'(33 76 87 88 92 76 92 76 92 87 88 76 91)
			'(89 92 76 92 92 92 92 92 92 76 76 76 91)
			'(65 69 70 67 66 69 66 67 66 67 69 70 70))))
		
(define dl-middle-maps
	(list
		(list
			'(7 10 10 10 10 10 79 10 10 10 10 9 11)
			'(39 76 92 92 92 92 92 92 92 92 92 92 90)
			'(39 92 61 61 61 61 61 61 61 61 61 92 90)
			'(23 92 61 85 86 92 92 92 85 86 61 92 43)
			'(39 92 61 87 88 92 92 92 87 88 61 92 90)
			'(39 92 61 61 61 61 61 61 61 61 61 92 27)
			'(39 92 92 92 92 92 92 92 92 92 92 92 27)
			'(71 72 74 72 72 72 73 72 72 72 74 72 75))
		(list
			'(1 62 62 62 62 62 5 62 62 62 62 62 6)
			'(89 81 83 51 50 50 52 52 52 51 81 83 54)
			'(89 84 82 51 50 50 50 51 52 52 84 82 54)
			'(17 50 50 52 18 19 20 20 21 53 50 50 38)
			'(89 50 50 52 34 35 35 36 37 53 53 53 91)
			'(89 81 83 51 52 51 53 53 52 52 81 83 22)
			'(89 84 82 52 52 53 53 52 52 52 84 82 91)
			'(65 70 70 70 69 70 68 66 66 66 66 69 70))
		(list
			'(1 62 3 62 62 2 79 3 62 62 62 4 6)
			'(33 61 61 61 61 61 61 61 61 61 61 61 54)
			'(89 61 76 76 76 76 76 76 76 76 76 61 22)
			'(23 61 76 76 76 76 76 76 76 76 76 61 43)
			'(49 61 76 76 76 76 76 76 76 76 76 61 91)
			'(89 61 76 76 76 76 76 76 76 76 76 61 54)
			'(89 61 61 61 61 61 61 61 61 61 61 61 91)
			'(65 67 67 67 67 67 73 67 67 67 67 67 70))
		(list
			'(7 10 10 10 10 10 79 10 10 10 10 10 11)
			'(55 24 24 24 26 26 26 26 26 26 25 26 90)
			'(55 24 24 24 26 26 26 40 41 41 42 26 27)
			'(23 24 24 24 25 26 26 56 57 57 58 26 43)
			'(39 24 24 24 24 24 24 40 41 41 42 26 27)
			'(39 24 24 24 26 24 25 56 57 57 58 25 90)
			'(55 24 24 24 24 24 24 24 24 26 26 26 59)
			'(71 72 74 72 72 72 73 72 72 74 72 72 75))
		(list
			'(12 96 96 13 96 96 15 14 13 14 14 13 16)
			'(49 85 86 52 85 86 51 85 86 50 85 86 63)
			'(33 87 88 24 87 88 24 87 88 53 87 88 63)
			'(17 52 24 24 25 81 83 81 83 26 53 53 32)
			'(33 52 24 25 50 84 82 84 82 26 26 53 63)
			'(49 85 86 53 85 86 51 85 86 24 85 86 63)
			'(49 87 88 53 87 88 25 87 88 53 87 88 63)
			'(65 67 67 67 67 67 68 69 69 69 69 69 64))
		(list
			'(1 4 52 53 2 3 5 50 62 3 3 4 6)
			'(89 81 86 83 82 85 83 85 86 85 83 87 54)
			'(89 84 88 88 86 84 88 84 82 87 82 85 54)
			'(51 86 88 83 85 83 82 77 78 81 82 83 38)
			'(89 84 81 86 81 83 85 93 94 86 87 88 54)
			'(89 83 87 88 85 84 87 87 88 86 85 84 54)
			'(49 82 85 83 84 88 82 81 83 84 82 83 54)
			'(65 67 67 67 67 67 68 69 69 69 69 69 70))))

(define (setup-dungeon dungeon map-def)
    (let* ((row-count (get-property dungeon "rows"))
           (col-count (get-property dungeon "columns")))
        (letrec* (
            (loop-row-tiles
                (lambda (row ri ci)
                    (if (< ci col-count)
                        (let ((tile-ind (list-ref row ci)))
                            (begin
                                (item-execute dungeon "set-tile!" ri ci (- tile-ind 1))
                                (loop-row-tiles row ri (+ ci 1))))))) 
            (loop-rows
                (lambda (ri)
                    (if (< ri row-count)
                        (let ((row (list-ref map-def ri)))
                            (begin
                                (loop-row-tiles row ri 0)
                                (loop-rows (+ ri 1) )))))))
            (loop-rows 0))))

;; list of items in the game world
(define game-items
    (list "bed" "chair" "coffee-table" "fridge" "jukebox" "jukebox-with-webs"
        "pot" "shrine" "shrine-with-webs" "skeleton" "sofa" "sofa-single" 
        "stove" "table" "tv"))

;; creates a game object in the game world
(define (create-object name)
    (let ((game-obj (item name "")))
        (set-property! game-obj "image" (format "assets/images/~a.png" name))
        game-obj)) 


(define (setup-world world)
    (let* ((row-count (get-property world "rows"))
           (col-count (get-property world "columns"))
           (setup-dungeon-map 
            (lambda (dungeon ri ci)
                (cond ((and (= ri 0) (= ci 0))
                       (setup-dungeon dungeon (list-ref dl-top-maps 0)))
                      ((and (= ri 0) (= ci (- col-count 1)))
                        (begin 
                       (setup-dungeon dungeon (list-ref dl-top-maps (- (length dl-top-maps) 1)))))
                      ((and (= ri (- row-count 1)) (= ci 0))
                       (setup-dungeon dungeon (list-ref dl-bottom-maps 0)))
                      ((and (= ri (- row-count 1)) (= ci (- col-count 1)))
                       (setup-dungeon dungeon (list-ref dl-bottom-maps (- (length dl-bottom-maps) 1))))
                      ((or (= ri 0) (= ri (- row-count 1)))
                       (let* ((ls (if (= ri 0) dl-top-maps dl-bottom-maps))
                              (ind (ceiling (* (random) (- (length ls) 2)))))
                            (setup-dungeon dungeon (list-ref ls ind))))
                      ((or (= ci 0) (= ci (- col-count 1)))
                       (let* ((ls (if (= ci 0) dl-left-walls dl-right-walls))
                              (ind (floor (* (random) (length ls)))))
                            (setup-dungeon dungeon (list-ref ls ind))))
                      (else
                        (let ((ind (floor (* (random) (length dl-middle-maps)))))
                            (setup-dungeon dungeon (list-ref dl-middle-maps ind)))))))                  
           (create-random-object
            (lambda ()
                (let ((random-ind (floor (* (random) (length game-items)))))
                    (list-ref game-items random-ind)))))
        (letrec (
            (create-dungeon-loop
                (lambda (ri ci)
                    (if (< ri row-count)
                        (let* ((end-ci? (>= ci (- col-count 1)))
                               (next-ri (if end-ci? (+ ri 1) ri))
                               (next-ci (if end-ci? 0 (+ ci 1))))
                            (begin
                                (item-execute world "add-dungeon!" ri ci (format "d~a~a" ri ci) "")
                                (setup-dungeon-map (item-execute world "get-dungeon" ri ci) ri ci)
                                (create-dungeon-loop next-ri next-ci)))))))
            (create-dungeon-loop 0 0))))
                                      
